name: Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - develop

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID_BACKEND: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}
  VERCEL_PROJECT_ID_FRONTEND: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}

jobs:
  preview-backend:
    name: Preview Backend
    runs-on: ubuntu-latest
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: |
          cd backend
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: |
          cd backend
          vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel Preview
        id: deploy
        run: |
          cd backend
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview-url=$url" >> $GITHUB_OUTPUT
          echo "Deployed to: $url"

      - name: Comment Preview URL on PR
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.deploy.outputs.preview-url }}';
            const body = `### üöÄ Backend Preview Deployed\n\n**Preview URL:** ${url}\n\n**Branch:** \`${context.payload.pull_request.head.ref}\`\n**Commit:** ${context.payload.pull_request.head.sha.substring(0, 7)}`;

            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('Backend Preview Deployed')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: body
              });
            }

  preview-frontend:
    name: Preview Frontend
    runs-on: ubuntu-latest
    needs: preview-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: |
          cd frontend
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Set Backend Preview URL
        run: |
          cd frontend
          echo "VITE_API_BASE_URL=${{ needs.preview-backend.outputs.preview-url }}/api" >> .env.preview

      - name: Build Project Artifacts
        run: |
          cd frontend
          vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel Preview
        id: deploy
        run: |
          cd frontend
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview-url=$url" >> $GITHUB_OUTPUT
          echo "Deployed to: $url"

      - name: Comment Preview URL on PR
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.deploy.outputs.preview-url }}';
            const backendUrl = '${{ needs.preview-backend.outputs.preview-url }}';
            const body = `### ‚ú® Frontend Preview Deployed\n\n**Preview URL:** ${url}\n**Backend API:** ${backendUrl}/api\n\n**Branch:** \`${context.payload.pull_request.head.ref}\`\n**Commit:** ${context.payload.pull_request.head.sha.substring(0, 7)}\n\n---\n\n#### üìù Preview Checklist\n- [ ] UI/UX ÌôïÏù∏\n- [ ] Í∏∞Îä• ÌÖåÏä§Ìä∏\n- [ ] Î∞òÏùëÌòï ÎîîÏûêÏù∏ ÌôïÏù∏\n- [ ] Î∏åÎùºÏö∞Ï†Ä Ìò∏ÌôòÏÑ± ÌôïÏù∏`;

            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('Frontend Preview Deployed')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: body
              });
            }

  preview-tests:
    name: Preview E2E Tests
    runs-on: ubuntu-latest
    needs: [preview-backend, preview-frontend]
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run E2E Tests
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ needs.preview-frontend.outputs.preview-url }}
          PLAYWRIGHT_API_BASE_URL: ${{ needs.preview-backend.outputs.preview-url }}/api
        run: |
          npx playwright install --with-deps
          npx playwright test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Comment test results on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const status = '${{ job.status }}';
            const emoji = status === 'success' ? '‚úÖ' : '‚ùå';
            const body = `### ${emoji} E2E Tests ${status === 'success' ? 'Passed' : 'Failed'}\n\n**Preview URL:** ${{ needs.preview-frontend.outputs.preview-url }}\n\n[View detailed test report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: body
            });
