# .github/workflows/frontend-tests.yml
name: Frontend Test Suite

on:
  push:
    branches: [ main, develop, 'feature/*' ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'

jobs:
  lint-and-typecheck:
    name: 린트 및 타입 검사
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 의존성 설치
        working-directory: frontend
        run: npm ci

      - name: TypeScript 타입 검사
        working-directory: frontend
        run: npx tsc --noEmit

      - name: ESLint 실행
        working-directory: frontend
        run: npm run lint

      - name: Prettier 포맷 검사
        working-directory: frontend
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx}"

  unit-tests:
    name: 단위 테스트 및 커버리지
    runs-on: ubuntu-latest
    needs: lint-and-typecheck

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 의존성 설치
        working-directory: frontend
        run: npm ci

      - name: 단위 테스트 실행 (커버리지 포함)
        working-directory: frontend
        run: npm run test:coverage

      - name: 커버리지 리포트 업로드
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: true

      - name: 커버리지 임계값 검증
        working-directory: frontend
        run: |
          # 커버리지가 80% 미만이면 실패
          COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.statements.pct')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "커버리지가 80% 미달입니다: $COVERAGE%"
            exit 1
          fi
          echo "커버리지: $COVERAGE%"

      - name: 테스트 결과 아티팩트 저장
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results
          path: |
            frontend/coverage/
            frontend/test-results/

  e2e-tests:
    name: E2E 테스트
    runs-on: ubuntu-latest
    needs: unit-tests

    strategy:
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 의존성 설치
        working-directory: frontend
        run: npm ci

      - name: Playwright 설치
        working-directory: frontend
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: 프로덕션 빌드
        working-directory: frontend
        run: npm run build

      - name: E2E 테스트 실행
        working-directory: frontend
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:4173

      - name: E2E 테스트 결과 업로드
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results-${{ matrix.browser }}
          path: |
            frontend/test-results/
            frontend/playwright-report/

  accessibility-tests:
    name: 접근성 테스트
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 의존성 설치
        working-directory: frontend
        run: npm ci

      - name: Playwright 설치
        working-directory: frontend
        run: npx playwright install --with-deps chromium

      - name: 접근성 테스트 실행
        working-directory: frontend
        run: npx playwright test tests/e2e/accessibility.spec.ts

      - name: 접근성 테스트 결과 업로드
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-test-results
          path: |
            frontend/test-results/
            frontend/accessibility-report/

  performance-tests:
    name: 성능 테스트
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 의존성 설치
        working-directory: frontend
        run: npm ci

      - name: Lighthouse CI 설치
        run: npm install -g @lhci/cli@0.12.x

      - name: 프로덕션 빌드
        working-directory: frontend
        run: npm run build

      - name: Lighthouse CI 실행
        working-directory: frontend
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: 성능 테스트 결과 업로드
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: |
            frontend/.lighthouseci/

  security-scan:
    name: 보안 스캔
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 의존성 설치
        working-directory: frontend
        run: npm ci

      - name: npm audit 실행
        working-directory: frontend
        run: npm audit --audit-level=high

      - name: Snyk 보안 스캔
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=frontend/package.json --severity-threshold=high

  build-and-deploy:
    name: 빌드 및 배포 (staging)
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, accessibility-tests, performance-tests]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 의존성 설치
        working-directory: frontend
        run: npm ci

      - name: 프로덕션 빌드
        working-directory: frontend
        run: npm run build
        env:
          VITE_API_BASE_URL: ${{ secrets.STAGING_API_URL }}

      - name: 빌드 파일 압축
        working-directory: frontend
        run: tar -czf dist.tar.gz dist/

      - name: 빌드 아티팩트 업로드
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist.tar.gz
          retention-days: 7

      # 실제 배포는 환경에 따라 조정
      - name: Staging 배포 (예시)
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "Staging 환경에 배포를 진행합니다..."
          # 실제 배포 스크립트 실행

  notify-results:
    name: 테스트 결과 알림
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, accessibility-tests, performance-tests]
    if: always()

    steps:
      - name: 테스트 결과 요약
        run: |
          echo "테스트 실행 완료"
          echo "단위 테스트: ${{ needs.unit-tests.result }}"
          echo "E2E 테스트: ${{ needs.e2e-tests.result }}"
          echo "접근성 테스트: ${{ needs.accessibility-tests.result }}"
          echo "성능 테스트: ${{ needs.performance-tests.result }}"

      # Slack 알림 (선택사항)
      - name: Slack 알림
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            프론트엔드 테스트 실행 완료
            • 단위 테스트: ${{ needs.unit-tests.result }}
            • E2E 테스트: ${{ needs.e2e-tests.result }}
            • 접근성: ${{ needs.accessibility-tests.result }}
            • 성능: ${{ needs.performance-tests.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}